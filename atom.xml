<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guest&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guestblog.xyz/"/>
  <updated>2020-02-21T14:26:35.750Z</updated>
  <id>https://guestblog.xyz/</id>
  
  <author>
    <name>Guest</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>wsl2闪退及出现“参考的对象类型不支持尝试的操作”的解决方法</title>
    <link href="https://guestblog.xyz/2020/02/21/wsl2problem/"/>
    <id>https://guestblog.xyz/2020/02/21/wsl2problem/</id>
    <published>2020-02-21T14:15:58.000Z</published>
    <updated>2020-02-21T14:26:35.750Z</updated>
    
    <content type="html"><![CDATA[<p>因为用的是windows insider preview，更新系统比较频繁，最近更新完系统的时候有时候打开wsl2会闪退，在终端打开会报“参考的对象类型不支持尝试的操作”的错误。后来上网找解决办法，成功解决了问题：</p><p>在管理员模式的终端下输入命令<code>netsh winsock reset</code></p><p>我觉得很神奇，上网查了很多资料包括wsl2的issue，但是还是没完全弄明白是为什么。netsh是<strong>Network Shell</strong>的简称，是一个windows系统本身提供的网络配置命令行工具。winsock是windows下的网络编程接口，这个命令的含义就是重置winsock。</p><p>github上有人说是shadowsocks和wsl2的冲突，但是我有一点还是没想明白，为什么网络接口的冲突会导致无法启动？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为用的是windows insider preview，更新系统比较频繁，最近更新完系统的时候有时候打开wsl2会闪退，在终端打开会报“参考的对象类型不支持尝试的操作”的错误。后来上网找解决办法，成功解决了问题：&lt;/p&gt;
&lt;p&gt;在管理员模式的终端下输入命令&lt;code&gt;ne
      
    
    </summary>
    
    
      <category term="wsl2" scheme="https://guestblog.xyz/categories/wsl2/"/>
    
    
      <category term="wsl2" scheme="https://guestblog.xyz/tags/wsl2/"/>
    
  </entry>
  
  <entry>
    <title>数据结构随笔📝</title>
    <link href="https://guestblog.xyz/2019/12/20/DataStructure2/"/>
    <id>https://guestblog.xyz/2019/12/20/DataStructure2/</id>
    <published>2019-12-20T11:50:19.000Z</published>
    <updated>2020-02-21T14:08:39.898Z</updated>
    
    <content type="html"><![CDATA[<p>内容来源凯哥的数据结构课以及ppt。</p><a id="more"></a><h2 id="数据结构导论"><a href="#数据结构导论" class="headerlink" title="数据结构导论"></a>数据结构导论</h2><h4 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h4><ul><li>数据：数据就是数值，也就是我们通过观察、实验或计算得出的结果。数据有很多种，最简单的就是数字。数据也可以是文字、图像、声音等。数据可以用于科学研究、设计、查证等。</li><li>数据结构：数据结构是<strong>计算机存储、组织数据的方式</strong>。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。</li><li>数据结构 = 数据 + <strong>关系</strong></li></ul><h4 id="线性结构与非线性结构"><a href="#线性结构与非线性结构" class="headerlink" title="线性结构与非线性结构"></a>线性结构与非线性结构</h4><ul><li>线性结构：线性表、队列、栈、串、数组等。</li><li>非线性结构：树、表、图，以及混合结构。</li><li>线性结构对应：结构更简单，功能更基础，维护更简单。</li><li>非线性结构对应：结构更复杂，功能更强到，维护更困难。</li></ul><h2 id="List-线性表"><a href="#List-线性表" class="headerlink" title="List 线性表"></a>List 线性表</h2><h4 id="结构特点"><a href="#结构特点" class="headerlink" title="结构特点"></a>结构特点</h4><ul><li><p><strong>全序关系</strong>，每一个元素都具有唯一的前驱和后继</p></li><li><p><strong>严格同构</strong>，任何两个组成部分之间具有相同结构</p></li></ul><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><h5 id="连续映射"><a href="#连续映射" class="headerlink" title="连续映射"></a>连续映射</h5><ul><li><p>连续映射：所有元素依据此许映射为连续而完整的物s理空间，称为<strong>顺序表</strong>。</p></li><li><p>优势：借助物理空间的连续性确保全序关系，管理简单，访问速度快。</p></li><li><p>劣势：连续空间难以预先准确规划，造成浪费或者无法扩展。</p></li><li><p>一个好的习惯：初始化.</p><p>动态创建字符数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *myBuffer=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x1f</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="离散映射"><a href="#离散映射" class="headerlink" title="离散映射"></a>离散映射</h5><ul><li><p>离散映射：各个元素映射到离散的物理空间并通过结构信息维护全序关系，称为<strong>链表</strong>。</p></li><li><p>优势：不依赖物理空间的连续性，分散存储，充分利用存储空间，具有良好可扩展性。</p></li><li><p>劣势：需要额外信息维护结构，逻辑较为复杂，动态分配内存造成额外时间消耗。</p></li></ul><h4 id="线性表："><a href="#线性表：" class="headerlink" title="线性表："></a>线性表：</h4><h5 id="实现在线性表中插入元素："><a href="#实现在线性表中插入元素：" class="headerlink" title="实现在线性表中插入元素："></a>实现在线性表中插入元素：</h5><ul><li><p>通常的写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Bool <span class="title">insert</span><span class="params">(struct Student value , <span class="keyword">int</span> index)</span> <span class="comment">//index从1开始</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">if</span> (index&gt; g_studentListMgr-&gt;count+<span class="number">1</span> || g_studentListMgr-&gt;count == MAX_List_length) <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">for</span>(pos = g_studentListMgr-&gt;count<span class="number">-1</span>;pos&gt;=index<span class="number">-1</span>;pos--) </span><br><span class="line">    &#123;</span><br><span class="line">        g_studentListMgr.students[pos+<span class="number">1</span>] = g_studentListMgr.students[pos]; </span><br><span class="line">    &#125;</span><br><span class="line">    g_studentListMgr.students[index<span class="number">-1</span>] = value;</span><br><span class="line">    g_studentListMgr-&gt;count+=<span class="number">1</span>；</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Insert的实现分析：</p><ul><li>最好情况：插入的位置在线性表尾部，时间复杂度为O(1)</li><li>最差情况：插入的位置在线性表头部，时间复杂度为O(n)</li><li>平均情况：各个位置都是等概率插入，时间复杂度为O(n/2)</li></ul></li><li><p>一种高效的在线性表中插入元素的方法：memmove函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memmove</span><span class="params">( <span class="keyword">void</span>* dest, <span class="keyword">const</span> <span class="keyword">void</span>* src, size_tcount )</span></span>;</span><br></pre></td></tr></table></figure><p>由src所指内存区域复制count个字节到dest所指内存区域。</p><p>src和dest所指内存区域可以重叠，但复制后dest内容会被更改。函数返回指向dest的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memmove(g_studentListMgr.students+index , g_studentListMgr.students+index<span class="number">-1</span> , g_studentListMgr-&gt;count - index);</span><br><span class="line">g_studentListMgr.students[index<span class="number">-1</span>] = value;</span><br></pre></td></tr></table></figure></li></ul><h5 id="remove的实现方法同理："><a href="#remove的实现方法同理：" class="headerlink" title="remove的实现方法同理："></a>remove的实现方法同理：</h5><ul><li><p>使用memmove函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memmove(g_studentListMgr.students+index<span class="number">-1</span> , g_studentListMgr.students+index , g_studentListMgr-&gt;count - index);</span><br><span class="line">g_studentListMgr.students[count] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="线性表总结："><a href="#线性表总结：" class="headerlink" title="线性表总结："></a>线性表总结：</h5><ul><li>存储空间静态分配，难以动态扩充</li><li>数据插入需要进行数据移动，代价O(n)较高</li><li>数据删除需要进行数据移动，代价O(n)较高</li><li>数据查找需要进行全表遍历，代价O(n)较高</li><li>按位置（下标）可直接获取，代价O(1)极低</li></ul><h4 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h4><ul><li><p>一个好的习惯：初始化，</p><p>创建链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UniDirectStudentList</span> <span class="title">g_studentListMgr</span>;</span></span><br><span class="line"><span class="function">Boolean <span class="title">Initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_studentListMgr.head = <span class="literal">NULL</span>;</span><br><span class="line">    g_studentListMgr.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入和删除部分比较简单，不再赘述。</p></li><li><p>get和locate也比较简单，同样不再赘述。</p></li><li><p>链表的合并：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Void <span class="title">union</span><span class="params">(struct UniDirectStudentList* list1,struct UniDirectStudentList* list2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">tmpPtr</span> , *<span class="title">tmpNode1</span>, *<span class="title">tmpNode2</span> = <span class="title">list2</span>-&gt;<span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">while</span>(tmpNode2!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        tmpNode1 = list1-&gt;head;</span><br><span class="line">        <span class="keyword">while</span>(tmpNode1!=<span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(tmpNode1-&gt;id , tmpNode2-&gt;id)) </span><br><span class="line">            &#123;</span><br><span class="line">                tmpPtr = tmpNode2;</span><br><span class="line">                tmpNode2 = tmpNode2-&gt;nextAddr;</span><br><span class="line">                <span class="built_in">free</span>(tmpPtr);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; tmpNode1 = tmpNode1-&gt;nextAddr; &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(tmpNode1 == <span class="literal">NULL</span>) <span class="comment">//若链表一中没有该元素，则将该元素添加到链表一头部。</span></span><br><span class="line">        &#123; </span><br><span class="line">             tmpPtr = tmpNode2; </span><br><span class="line">             tmpNode2 = tmpNode2-&gt;nextAddr;</span><br><span class="line">             tmpPtr-&gt;nextAddr = list1-&gt;head;</span><br><span class="line">             list1-&gt;head = tmpPtr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环链表的应用：CPU进程调度。</p></li></ul><h2 id="Stack栈"><a href="#Stack栈" class="headerlink" title="Stack栈"></a>Stack栈</h2><h4 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h4><p><strong>栈（stack）</strong>在计算机科学中是限定仅在表尾进行插入或删除操作的<strong>线性表</strong>。栈是一种数据结构，它按照后进<strong>先出（LIFO）</strong>的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据。栈就是一种类似桶堆积物品的数据结构，进行删除和插入的一端称栈顶，另一端称栈底。插入一般称为<strong>压栈（push）</strong>，删除则称为<strong>弹栈（pop）</strong>。 栈也称为后进先出表。</p><h4 id="特殊之处"><a href="#特殊之处" class="headerlink" title="特殊之处"></a>特殊之处</h4><p>栈的特殊之处体现在元素的添加（push）和删除（pop）</p><h4 id="栈的层次化架构"><a href="#栈的层次化架构" class="headerlink" title="栈的层次化架构"></a>栈的层次化架构</h4><p>通用线性结构：insert, get, remove</p><p>栈结构：push, pop</p><h4 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqStudentListByArray</span>* <span class="title">g_studentListMgr</span>;</span> <span class="comment">//假设顺序表已经完成初始化</span></span><br><span class="line"><span class="function">Boolean <span class="title">push</span><span class="params">(struct Student value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> insert(value , g_studentListMgr-&gt;count+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Boolean <span class="title">pop</span><span class="params">(struct Student&amp; value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">get</span>(g_studentListMgr-&gt;count , value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">remove</span>(g_studentListMgr-&gt;count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>由于期末考试的缘故，很多知识比如后面的树和图论在梳理的同时没办法认真的把笔记整理出来了，实在是有点遗憾。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容来源凯哥的数据结构课以及ppt。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://guestblog.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://guestblog.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>next主题7.5版本的配置文件修改(调整成5.0的内容框宽度)🎈</title>
    <link href="https://guestblog.xyz/2019/12/08/modifyblog/"/>
    <id>https://guestblog.xyz/2019/12/08/modifyblog/</id>
    <published>2019-12-07T18:44:03.000Z</published>
    <updated>2020-02-21T14:05:52.027Z</updated>
    
    <content type="html"><![CDATA[<p>由于之前安装的next版本是最新的7.5，很多地方比起5.0发生了蛮大的变化，主要是字体变大以及文章内容框变宽导致看得很不习惯，于是自己开始谷歌并修改配置文件。</p><a id="more"></a><p>修改的配置文件存放在<code>MyBlog\themes\next\source\css\_schemes\Pisces\_layout.styl</code>中，选择对应的主题文件，我的是<strong>Pisces</strong>。按照网上的文档，原以为只要在结尾处加上如下代码就行了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.header&#123; <span class="attribute">width</span>: <span class="number">80%</span>; &#125; <span class="comment">/* 80% /</span></span><br><span class="line"><span class="comment">.main-inner &#123; width: 80%; &#125; / 80% */</span></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: calc(<span class="number">100%</span> - <span class="number">260px</span>); &#125;</span><br></pre></td></tr></table></figure><p>结果发现实际上文章的区域还是没有改变，仍旧在原来的位置，只好在其本身的width处改成<code>width: 80%;</code></p><p>成功解决。</p><p>字体则是把所有字号都缩小，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Font size</span></span><br><span class="line">$font-size-base           = (hexo-config('font.enable') and hexo-config('font.global.size') is a 'unit') ? unit(hexo-config('font.global.size'), em) : 1em;</span><br><span class="line">$font-size-smallest       = .675em;</span><br><span class="line">$font-size-smaller        = .75em;</span><br><span class="line">$font-size-small          = .8125em;</span><br><span class="line">$font-size-medium         = .875em;</span><br><span class="line">$font-size-large          = 1em;</span><br><span class="line">$font-size-larger         = 1.125em;</span><br><span class="line">$font-size-largest        = 1.25em;</span><br></pre></td></tr></table></figure><p>整个博客看起来舒服多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于之前安装的next版本是最新的7.5，很多地方比起5.0发生了蛮大的变化，主要是字体变大以及文章内容框变宽导致看得很不习惯，于是自己开始谷歌并修改配置文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://guestblog.xyz/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://guestblog.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>关于数据结构的一点浅薄的感悟💡</title>
    <link href="https://guestblog.xyz/2019/12/06/DataStructure1/"/>
    <id>https://guestblog.xyz/2019/12/06/DataStructure1/</id>
    <published>2019-12-06T01:24:57.000Z</published>
    <updated>2019-12-08T02:16:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构课也算是一学期快要上完了，尽管凯哥吹了一学期的牛，似乎并没有讲什么数据结构方面具体的知识，但我感觉一学期下来收获良多。可能是因为凯哥讲课比较注重方法论，许多具体的点，尽管不细讲，但他会跟我们讲明白原理，讲一些计算机的底层的架构，我觉得这些对我思想方面的提升是巨大的。我觉得数据结构这门课在凯哥的引导以及自学下慢慢领悟到了一些思想了。有的时候看凯哥其实更像一个计组老师，我很感激他。</p><a id="more"></a><p>最近在写一个图论的作业，写着写着突然想起来以前和学长的聊天：<br>还没上大学的时候，根本就不知道数据结构的含义，只知道大学要开这门课，学长对我说以后数据结构一定要好好学，基础打扎实。我那时候还不明白为什么，我问他你们数据结构学了什么呢？他说堆栈、树、图之类的，我说那这不是算法吗？他说还是有一定的区别的。</p><p>我觉得把数据结构和算法等同是我以前一个十分幼稚的想法，初中的时候打过oi，那时候学了一大堆算法，分治、贪心、动态规划以及一大堆现在已经叫不上名的算法。但实际上感觉当时自己只是机械地去为了做题学了一堆算法，根本没有对这一门学问进行一个思想方面的总结。</p><p>现在回头来看，感觉数据结构和算法最大的区别，就是<strong>两者注重的方面不一样</strong>。数据结构和算法都是程序员在解决问题中需要用到的技能，不同的数据结构配合着不同的算法。</p><p>数据结构，我觉得最重要的是学会面对一个具体的问题时提出一个<strong>合适</strong>的模型来存储数据。我认为一个模型并不一定要符合问题本身的特征，例如一排小朋友排队，并不一定就要建立一个线性表，用树也是可以的，具体却决于问题。数据结构的建立应当基于自己所需要解决的问题，使得在这一数据结构下算法有着最高效发挥的余地。比如我这几天的作业就是要写图的Dijkstra算法，我一开始想偷懒用二维邻接矩阵来存储边的长度，但如果使用这样的数据结构，每从一个节点出发的时候都得进行O(n)的遍历来判断边是否走得通。因此我选择用邻接链表来存储边，这样在建立数据结构的时候会稍显麻烦，因为每一次都得找到节点的存储边的链表的最后一位。但这样在遍历的时候每一次只需要遍历节点对应的邻接链表就可以了，大大减少了时间开销。</p><p>而算法，我觉得是提升效率的一个拓展，但如果没有合适的数据结构，算法也很难有发挥的余地。算法的内容博大精深，但是很多时候的情况并不需要用到一些特别复杂的算法，一些经典的算法已经可以解决绝大多数的问题。而再往后的算法都是一些具体的优化与博弈，是要根据具体问题设计的。总的来说我觉得没有完美的算法，大多数不同的算法的设计其实是在牺牲不必要的变量换取所需的变量，例如时间和空间，根据具体问题选择倾向的对象。但也有些算法，它牺牲的变量对于换取的价值来说几乎不值一提，例如<strong>快速排序</strong>，因此会显得比原先的算法高效得多。</p><p>掌握算法固然重要，但若是想我以前一样罔顾数据结构盲目学算法的话，终究没法领悟算法的精髓，有的时候设计出一个漂亮的数据结构也能带来等同于设计出一个漂亮算法的喜悦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据结构课也算是一学期快要上完了，尽管凯哥吹了一学期的牛，似乎并没有讲什么数据结构方面具体的知识，但我感觉一学期下来收获良多。可能是因为凯哥讲课比较注重方法论，许多具体的点，尽管不细讲，但他会跟我们讲明白原理，讲一些计算机的底层的架构，我觉得这些对我思想方面的提升是巨大的。我觉得数据结构这门课在凯哥的引导以及自学下慢慢领悟到了一些思想了。有的时候看凯哥其实更像一个计组老师，我很感激他。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://guestblog.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://guestblog.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo博客踩的无数坑🤦‍♂️</title>
    <link href="https://guestblog.xyz/2019/11/09/buildblog/"/>
    <id>https://guestblog.xyz/2019/11/09/buildblog/</id>
    <published>2019-11-09T04:05:17.000Z</published>
    <updated>2019-12-07T19:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天折腾一晚上总算是把hexo的博客搭出来了，由于同之前的hugo差异很大，在这过程中踩了无数坑。</p><p>首先是next的版本，原先在next作者issnan的网站上下载的next是5.1.4版本的，结果运行的过程中控制台一直发提醒，才发现next官方的github上已经是7.0.0版本了，因此又重新下载了一次。</p><p>接着是本地调试，本地调试很顺利，几乎没有遇到什么坑。</p><p>为了修改自己的配置，打开_config.yml开始改参数。</p><h5 id="顺着文档一条一条来，不懂的看别人博客、看注释。"><a href="#顺着文档一条一条来，不懂的看别人博客、看注释。" class="headerlink" title="顺着文档一条一条来，不懂的看别人博客、看注释。"></a>顺着文档一条一条来，不懂的看别人博客、看注释。</h5><a id="more"></a><ol><li><p>先改网站的图标，这里有个bug很奇怪，我用自己的ico的时候网站加载不出来，用默认的png却可以，于是上网把ico转换成了png，接着就成功了。</p></li><li><p>然后是菜单，菜单这里next的5.1.4版本又有个bug，路径和emoji之间用||分开，但是||前若是加空格就无法识别路径，这个bug在7.0.0里面没有了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br></pre></td></tr></table></figure></li><li><p>social一栏，本来想把邮箱放进去的，但是mailto语句又无法起作用，这个问题现在也没解决，只好注释掉了邮箱这一栏。</p></li><li><p>github_banner这一个模块很有意思，会在页面右上角生成一个猫头，挺可爱的。</p></li><li><p>最后是动态背景，搞了很久都没成功，enable: true不起作用，最后谷歌才发现在7.0.0版本中各种动画效果都是需要先安装依赖才能使用的，顺着注释找到依赖以后很快就解决了问题。</p></li></ol><h5 id="全部搞好以后就准备push到github上面了，这个环节是我折腾的最久的部分。"><a href="#全部搞好以后就准备push到github上面了，这个环节是我折腾的最久的部分。" class="headerlink" title="全部搞好以后就准备push到github上面了，这个环节是我折腾的最久的部分。"></a>全部搞好以后就准备push到github上面了，这个环节是我折腾的最久的部分。</h5><p>首先我在github上创建了一个新的repo，命名为xxx.github.io，接着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git config --global user.name gitaccount</span><br><span class="line">git config --global user.email gitaccount@example.com</span><br><span class="line">git remote add origin master https://xxx</span><br><span class="line">git push orgin master</span><br></pre></td></tr></table></figure><p>结果遇到了一个问题 update were rejected because the tip of your current branch is behind …. </p><p>谷歌以后，原来是因为github上面有README.md而本地仓库没有，所以先pull下来，再push，解决问题。</p><p>终于push上去了，但是repo的settings页面又显示AUTHOR.md解析错误。随后谷歌无果，我把这个md删除了（不是特别重要），结果就成功了。</p><h5 id="本来以为没事了，打开博客发现404。最后咨询了神仙学弟终于获得了解决方案。"><a href="#本来以为没事了，打开博客发现404。最后咨询了神仙学弟终于获得了解决方案。" class="headerlink" title="本来以为没事了，打开博客发现404。最后咨询了神仙学弟终于获得了解决方案。"></a>本来以为没事了，打开博客发现404。最后咨询了神仙学弟终于获得了解决方案。</h5><p>原先一直想着自己push就没有想用hexo官方给出的办法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>最后才发现这方法比push效率高多了。</p><p><strong>原来自己对hexo生成博客的认识有一个很大的误区</strong>，以为把本地文件push到github就可以自动生成了。实际上本地的文件只是方便自己配置而设置的，实际上配置好以后还需要用generate生成静态网站，再把generate指令生成的文件push到github上才能出现页面。现在想想原来的文件夹里面连index.html都没有🤣。</p><p>这一次搭建博客，最深刻的感受就是自己对git的使用和静态网站生成的原理还不够熟悉，踩了无数坑，谷歌了无数次，但也收获良多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天折腾一晚上总算是把hexo的博客搭出来了，由于同之前的hugo差异很大，在这过程中踩了无数坑。&lt;/p&gt;
&lt;p&gt;首先是next的版本，原先在next作者issnan的网站上下载的next是5.1.4版本的，结果运行的过程中控制台一直发提醒，才发现next官方的github上已经是7.0.0版本了，因此又重新下载了一次。&lt;/p&gt;
&lt;p&gt;接着是本地调试，本地调试很顺利，几乎没有遇到什么坑。&lt;/p&gt;
&lt;p&gt;为了修改自己的配置，打开_config.yml开始改参数。&lt;/p&gt;
&lt;h5 id=&quot;顺着文档一条一条来，不懂的看别人博客、看注释。&quot;&gt;&lt;a href=&quot;#顺着文档一条一条来，不懂的看别人博客、看注释。&quot; class=&quot;headerlink&quot; title=&quot;顺着文档一条一条来，不懂的看别人博客、看注释。&quot;&gt;&lt;/a&gt;顺着文档一条一条来，不懂的看别人博客、看注释。&lt;/h5&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://guestblog.xyz/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://guestblog.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="github" scheme="https://guestblog.xyz/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to my blog! 😜</title>
    <link href="https://guestblog.xyz/2019/11/07/welcome/"/>
    <id>https://guestblog.xyz/2019/11/07/welcome/</id>
    <published>2019-11-07T13:41:10.000Z</published>
    <updated>2019-11-08T12:16:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客 : )</p><p>原来的博客由于github账号修改username而挂了，原先的博客是用的hugo生成的。本来想迁移过来的，后来发现hexo上的next主题很是讨喜，于是又重新搭了这个博客。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎来到我的博客 : )&lt;/p&gt;
&lt;p&gt;原来的博客由于github账号修改username而挂了，原先的博客是用的hugo生成的。本来想迁移过来的，后来发现hexo上的next主题很是讨喜，于是又重新搭了这个博客。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="https://guestblog.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="life" scheme="https://guestblog.xyz/tags/life/"/>
    
  </entry>
  
</feed>
